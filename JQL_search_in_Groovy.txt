import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.link.IssueLinkTypeManager
issueManager = ComponentAccessor.getIssueManager()
customFieldManager = ComponentAccessor.getCustomFieldManager()
issueFactory = ComponentAccessor.getIssueFactory()
linkManager = ComponentAccessor.getIssueLinkManager()
projectManager = ComponentAccessor.getProjectManager()
linkTypeManager = ComponentAccessor.getComponentOfType(IssueLinkTypeManager)
currentUser = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
userManager = ComponentAccessor.getUserManager()
techUser = userManager.getUser('noreply')

min=10
max=100
Random rand = new Random();


jqlSearch = "project = VTBG"
SearchService searchService = ComponentAccessor.getComponent(SearchService.class)
UserUtil userUtil = ComponentAccessor.getUserUtil()
User user = ComponentAccessor.getJiraAuthenticationContext().getLoggedInUser()
IssueManager issueManager = ComponentAccessor.getIssueManager()
List<Issue> issues = null
 
SearchService.ParseResult parseResult =  searchService.parseQuery(user, jqlSearch)
def searchResult = searchService.search(user, parseResult.getQuery(), PagerFilter.getUnlimitedFilter())
issues = searchResult.issues.collect {issueManager.getIssueObject(it.id)}


for (issue in issues){
links=linkManager.getInwardLinks(issue.id)
for (linkobj in links){
DestinO=linkobj.getSourceObject()
linkManager.removeIssueLink(linkobj,techUser)
linkId = linkTypeManager.getIssueLinkTypesByName("include").first().getId()
int sequence = rand.nextInt((max - min) + 1) + min;
linkManager.createIssueLink (issue.id, DestinO.id, linkId, sequence, techUser)
}
}